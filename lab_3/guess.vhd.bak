library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;


entity guess is
port(
	clk	:in std_logic;
	input	:in std_logic_vector(27 downto 0); --word length
	W	:in std_logic_vector(5 downto 0);
	F	:in std_logic_vector(5 downto 0);  --floating point length
	
	Yout	:out std_logic_vector(31 downto 0) --output of the initial guess Yo	
	);
end entity;


architecture guess_arch of guess is



component lzc
	port (
        clk        : in  std_logic;
        lzc_vector : in  std_logic_vector (27 downto 0);
        lzc_count  : out std_logic_vector (5 downto 0)
    );
end component;

component ROM1 --Created by quartus through the basic functions
	PORT
	(
		address		: IN STD_LOGIC_VECTOR (7 DOWNTO 0);
		clock		: IN STD_LOGIC  := '1';
		q		: OUT STD_LOGIC_VECTOR (7 DOWNTO 0)
	);
end component;




signal beta			:signed(5 downto 0); --these can be negative or positive
signal shiftbeta, alpha		:signed(11 downto 0);
signal Z			:std_logic_vector(5 downto 0); -- number of zeros
signal Xa, Xb			:signed(27 downto 0);



constant B0			: signed(5 downto 0) := "000001";

begin

--step 1
A0 : lzc port map(clk,input,Z);

--step 2
beta <= (signed(W) - signed(F) - signed(Z) - "000001");

--step 3
compute_alpha : process(beta,input, alpha)
begin
	shiftbeta <=  (beta srl 1)*B0 sll 1;


	if (beta(0) = '0') then	
		alpha <= signed(("111110"*beta) + shiftbeta);
	else
		alpha <= signed(("111110"*beta) + (shiftbeta)+ B0 srl 1); --may be fail point
	end if;
	
	---shifting by alpha bits to compute x(alpha) 
	---and shifting by beta bits to compute x(beta)

	Xa  <= signed(input) srl to_integer(alpha);
	Xb  <= signed(input) srl to_integer(beta);

	
	
	


end process;

	Yout <= ("0000" & (std_logic_vector(Xa));

end architecture;